@model BoardofPardons.Entity.NonIncarceratedStep1
@{
    ViewBag.Title = "NonIncarcerated Step 1";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
    <div class="well">
        <div class="text-center">
            <h4>Pennsylvania Board of Pardons Commonwealth of Pennsylvania Application for Clemency</h4>
        </div>
        <p><strong>Important:</strong>This application should be completed by non-incarcerated applicants only. All questions must be answered. Please answer "N/A" for questions that are not applicable to you. </p>
        <div class="row" id="formContent">
        </div>
        @using (Html.BeginForm("step1", "NonInCarcerated", FormMethod.Post, new { novalidate = "novalidate", @id = "insertStep1" }))
        {
            <div class="panel panel-default">
                <div class="panel-heading">SECTION 1: Type of Clemency Requested</div>
                <div class="panel-body">
                    <div class="col-lg-12">

                        <div class="col-lg-3">
                            <div class="radio-inline">
                                <label>
                                   
                                    @Html.RadioButtonFor(model => model.ClemencyRequested, "Pardon", new { id = "rbtnPardon", @checked = "checked" })
                                    Pardon
                                </label>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="radio-inline">
                                <label>
                                   
                                    @Html.RadioButtonFor(model => model.ClemencyRequested, "Parole", new { id = "rbtnParol", @checked = "checked" })
                                    Parole
                                </label>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="radio-inline">
                                <label>
                                   
                                    @Html.RadioButtonFor(model => model.ClemencyRequested, "Commute Minimum Sentence", new { id = "rbtnCommuteMinimumSentence" })
                                    Commute Minimum Sentence
                                </label>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="radio-inline">
                                <label>
                                    
                                    @Html.RadioButtonFor(model => model.ClemencyRequested, "Commute Maximum Sentence", new { id = "rbtnCommuteMaximumSentence" })
                                    Commute Maximum Sentence
                                </label>
                            </div>
                        </div>


                    </div>
                    <div class="clearfix"></div>
                    <hr />
                    <div class="col-lg-12">
                        <div class="col-lg-9">
                            <p class="lead">Have you previously filed a pardon application in Pennsylvania? (if the answer is no, put N/A)</p>
                        </div>
                        <div class="col-lg-2">
                            <div class="radio-inline">
                                <label>
                                    @Html.RadioButtonFor(model => model.HaveFiled, "True", new { id = "otherstateFilledYes", @checked = "checked" })
                                    
                                    Yes
                                </label>
                            </div>
                            <div class="radio-inline">
                                <label>
                                    @Html.RadioButtonFor(model => model.HaveFiled, "False", new { id = "otherstateFilledNo" })
                                    
                                    No
                                </label>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="form-group">
                                <p class="col-lg-12 help-block">If you answered YES, list date(s) of your prevous application(s) and application numbers (if known):</p>

                                <div class="col-lg-12 form-group">
                                    
                                    @Html.TextBoxFor(model => model.Previous, new { @class = "form-control", id = "previous" })
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <div class="col-lg-12">
                        <div class="col-lg-9">
                            <p class="lead">Have you previously filed a pardon application in another state?</p>
                        </div>
                        <div class="col-lg-2">
                            <div class="radio-inline">
                                <label>
                                    
                                    @Html.RadioButtonFor(model => model.OtherState, "True", new { id = "rbtnotheryes", @checked = "checked" })
                                    Yes
                                </label>
                            </div>
                            <div class="radio-inline">
                                <label>
                                    
                                    @Html.RadioButtonFor(model => model.OtherState, "False", new { id = "rbtnotherno" })
                                    No
                                </label>
                            </div>
                        </div>
                        <div class="form-group">
                            <p class="col-lg-12 help-block">If you answered YES, provide the following:</p>
                            <div class="col-lg-2">Where Filed?</div>
                            <div class="col-lg-12 form-group">
                               
                                @Html.TextBoxFor(model => model.WhereFiled, new { @class = "form-control", id = "txtwherefiled" })
                            </div>
                        </div>

                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="col-lg-4">
                                Was it Granted?
                                <div class="radio-inline">
                                    <label>
                                        
                                        @Html.RadioButtonFor(model => model.GrantedOtherState, "True", new { id = "GrantedOtherState", @checked = "checked" })
                                        Yes


                                    </label>
                                </div>
                                <div class="radio-inline">
                                    <label>
                                        
                                        @Html.RadioButtonFor(model => model.GrantedOtherState, "False", new { id = "GrantedOtherState" })
                                        No
                                    </label>
                                </div>
                            </div>
                            <div class="col-lg-1">
                                Date Granted
                            </div>
                            <div class="col-lg-4 form-group">
                                @Html.TextBoxFor(model => model.DateOtherStateGranted, new { type = "date", @class = "form-control", id = "txtdateotherstategranted" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">SECTION 2: Type of Clemency Requested</div>
                <div class="panel-body">

                    <div class="col-lg-12">

                        <div class="col-lg-3">
                            <div class="form-group ">
                                <label>
                                    Last Name
                                </label>
                                
                                @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", id = "txtlastname" })

                            </div>

                        </div>
                        <div class="col-lg-3 form-group">
                            <label>
                                First Name
                            </label>                            
                            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", id = "txtfirstname" })
                        </div>
                        <div class="col-lg-3 form-group">
                            <label>
                                Middle Name
                            </label>
                            
                            @Html.TextBoxFor(model => model.MiddleName, new { @class = "form-control" })
                        </div>
                        <div class="col-lg-3 form-group">
                            <label>
                                Suffix
                            </label>
                            
                            @Html.TextBoxFor(model => model.Suffix, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="col-lg-12">

                        <div class="col-lg-3 form-group">
                            <label>
                                Birth Date
                            </label>
                            
                            @Html.TextBoxFor(model => model.BirthDate, new { type = "date", @class = "form-control dateRequired dobRangeCheck" })
                        </div>
                        <div class="col-lg-3 form-group">
                            <label>
                                Place of Birth
                            </label>
                            
                            @Html.TextBoxFor(model => model.BirthPlace, new { @class = "form-control" })
                        </div>
                        <div class="col-lg-3 form-group">
                            <label class="">
                                Gender
                            </label><br />
                            <div class="radio-inline">
                                <label>
                            
                                    @Html.RadioButtonFor(model => model.Gender, "Male", new { id = "male",@checked = "checked" })
                                    Male
                                </label>
                            </div>
                            <div class="radio-inline">
                                <label>
                            
                                    @Html.RadioButtonFor(model => model.Gender, "Female", new { id = "female" })
                                    Female
                                </label>
                            </div>
                        </div>
                        <div class="col-lg-3 form-group">
                            <label>
                                SS Number
                            </label>
                           
                            @Html.TextBoxFor(model => model.SSN, new { @class = "form-control SSNValidate" })
                        </div>


                    </div>
                    <div class="clearfix"></div>
                    <hr />

                    <div class="col-lg-12">
                        <h5>Race: (for statistical purposes only)</h5>
                        <br />
                        <div class="radio-inline">
                            <label>
                                @Html.RadioButtonFor(model => model.Race, "White/Caucasian" ,new{@checked = "checked"})
                              
                                White/Caucasian
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                              
                                @Html.RadioButtonFor(model => model.Race, "Black/African American")
                                Black/African American
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                              
                                @Html.RadioButtonFor(model => model.Race, "Asian")
                                Asian
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                              
                                @Html.RadioButtonFor(model => model.Race, "Native American")
                                Native American
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                              
                                @Html.RadioButtonFor(model => model.Race, "Hispanic/Latino")
                                Hispanic/Latino
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                              
                                @Html.RadioButtonFor(model => model.Race, "Other")
                                Other
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                              
                                @Html.RadioButtonFor(model => model.Race, "Do not wish to disclose")
                                Do not wish to disclose
                            </label>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <hr />
                    <div class="col-lg-8 form-group">
                        <label>Address</label>
                       
                        @Html.TextBoxFor(model => model.ApplicantAddress, new { @class = "form-control" })
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Apartment/Floo</label>
                       
                        @Html.TextBoxFor(model => model.Appartment, new { @class = "form-control" })
                    </div>
                    <div class="clearfix"></div>
                    <div class="col-lg-5 form-group">
                        <label>City</label>
                       
                        @Html.TextBoxFor(model => model.ApplicantCity, new { @class = "form-control" })
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>State</label>
                       
                        @Html.TextBoxFor(model => model.ApplicantState, new { @class = "form-control" })
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Zip</label>
                       
                        @Html.TextBoxFor(model => model.ApplicantZip, new { @class = "form-control" })
                    </div>
                    <div class="clearfix"></div>
                    <hr />
                    <div class="col-lg-5 form-group">
                        <label>Home Phone</label>
                       
                        @Html.TextBoxFor(model => model.ApplicantPhone, new { @class = "form-control PhoneNumberValidate" })
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Cell Phone</label>
                       
                        @Html.TextBoxFor(model => model.CellPhone, new { @class = "form-control txtcellphone" })
                    </div>
                    <div class="col-lg-4 form-group">
                        <label>Email</label>
                       
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control " })
                    </div>
                    <div class="clearfix"></div>
                    <div class="col-lg-12 form-group">
                        <label>Aliases and Other Names: State every other name by which you have been known. Include your maiden name, names by former marriages, aliases and nicknames.</label>
                       
                        @Html.TextBoxFor(model => model.Aliases, new { @class = "form-control " })
                    </div>
                    <div class="clearfix"></div>
                    <hr />
                    <div class="col-lg-12 ">
                        <label>Representation:  Who will represent if you are granted a public hearing?</label><br />
                        <div class="radio-inline">
                            <label>
                       
                                @Html.RadioButtonFor(model => model.WhoRep, "Self", new { @checked = "checked" })
                                Self
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                       
                                @Html.RadioButtonFor(model => model.WhoRep, "Attorney")
                                Attorney
                            </label>
                        </div>
                        <div class="radio-inline">
                            <label>
                       
                                @Html.RadioButtonFor(model => model.WhoRep, "Other")
                                Other
                            </label>
                        </div>
                    </div>
                    <div class="col-lg-12 form-group">
                        <label>Title</label>
                       
                        @Html.TextBoxFor(model => model.Title, new { @class = "form-control " })
                    </div>
                    <div class="col-lg-12 form-group">
                        <label> Address</label>
                       
                        @Html.TextBoxFor(model => model.Address, new { @class = "form-control " })
                    </div>
                    <div class="col-lg-12 form-group">
                        <label>address2: (appartment, floor, suite, etc.)</label>
                       
                        @Html.TextBoxFor(model => model.Address2, new { @class = "form-control " })
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>City</label>
                       
                        @Html.TextBoxFor(model => model.City, new { @class = "form-control " })
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>State</label>
                       
                        @Html.TextBoxFor(model => model.State, new { @class = "form-control " })
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Zip</label>
                       
                        @Html.TextBoxFor(model => model.Zip, new { @class = "form-control " })
                    </div>
                    <div class="col-lg-3 form-group">
                        <label>Phone</label>
                       
                        @Html.TextBoxFor(model => model.Phone, new { @class = "form-control " })
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="col-sm-4">&nbsp;</div>
                <div class="col-sm-2">
                    <button type="submit" name="Command" value="save" class="btn btn-success">Save &amp; Continue</button>
                </div>
                <div class="col-sm-3">
                    <button type="submit" name="Command" value="submit" class="btn btn-warning">Save &amp; Quit</button>
                </div>
            </div>
        }
    </div>
</div>

@section scripts {
    <script type="text/javascript">

        // $(function () {
        $(document).ready(function () {

            //-- Date Validation Variables --
            var currentDate = new Date();
            var startDate = new Date();
            var futureDate = new Date();

            startDate.setDate(startDate.getDate() - (365 * 18));
            futureDate.setDate(startDate.getDate() + 5);

            // -- DATE OF BIRTH --
            $.validator.addMethod("dobRangeCheck", function (value, element)
            {
                if (value == "") {
                    return false;
                }

                var dateOfBirth = new Date(value);
                if (dateOfBirth > startDate) {
                    return false;
                }
                return true;
            }, "The Date of Birth must before" + startDate.toDateString("mm/dd/yyyy") + "!");

            $.validator.addClassRules("txtbirthdate", {
                dateRequired: true,
                dateValidCheck: true,
                dobRangeCheck: true
            });

            // -- FIRST NAME --
            jQuery.validator.addMethod("FirstNameValidate", function (fname) {
                if (fname.match(/^[a-zA-Z-']{1,32}$/)) {
                    return true
                }
            }, "First Name is required and must be characters a-z, A-Z, -, ', and 1-32 characters long");

            $.validator.addClassRules("txtfirstname", {
                required: true,
                FirstNameValidate: true
            });

            // -- MIDDLE NAME --
            jQuery.validator.addMethod("MiddleNameValidate", function (mname) {
                if (mname.match(/^[a-zA-Z-]{1,32}$/)) {
                    return true
                }
            }, "Middle name is required and must be characters a-z, A-Z,");

            $.validator.addClassRules("txtmiddlename", {
                required: true,
                MiddleNameValidate: true
            });

            // -- LAST NAME --
            jQuery.validator.addMethod("LastNameValidate", function (lname) {
                if (lname.match(/^[a-zA-Z-']{1,32}$/)) {
                    return true
                }
            }, "Last Name is required and must be characters a-z, A-Z, -, ', and 1-32 characters long");

            $.validator.addClassRules("txtlastname", {
                required: true,
                LastNameValidate: true
            });


            // -- PHONE NUMBER --
            jQuery.validator.addMethod("PhoneNumberValidate", function (pNumber) {
                if (pNumber.match(/^[01]?[- .]?\(?[2-9]\d{2}\)?[- .]?\(?[1-9]\d{2}\)?[- .]?\d{4}$/)) {
                    return true
                }
            }, "Please enter valid phone number");

            $.validator.addClassRules("txtapplicantphone", {
                // required: true,
                PhoneNumberValidate: true
            });

            // -- CELL NUMBER --
            jQuery.validator.addMethod("CellNumberValidate", function (pNumber) {
                if (pNumber.match(/^[01]?[- .]?\(?[2-9]\d{2}\)?[- .]?\(?[1-9]\d{2}\)?[- .]?\d{4}$/)) {
                    return true
                }
            }, "Please enter valid Cell number");

            $.validator.addClassRules("txtcellphone", {
                required: true,
                CellNumberValidate: true
            });


            // -- SSN --
            jQuery.validator.addMethod("SSNValidate", function (ssn) {
                if (ssn.match(/[0-9]{3}?[-]?[0-9]{2}?[-]?[0-9]{4}/)) {
                    return true
                }
            }, "Please specify a valid SSN in the format 999999999 or 999-99-9999");

            $.validator.addClassRules("SSN", {
                SSNValidate: true
            });

            // -- AUTHORIZATION DATE --
            $.validator.addClassRules("AuthDate", {
                //  dateRequired: true,
                dateValidCheck: true,
                dateAvailableCheck: true
            });

            $("#insertStep1").validate({
                ignore: "",
                rules: {
                    ClemencyRequested: { required: true },
                    GrantedOtherState: { required: true },
                    havefiled: { required: true },
                    gender: { required: true },
                    WhoRep: { required: true },
                    Suffix: { required: true },
                    Aliases: { required: true },
                    MiddleName: { required: true },
                    FirstName: { required: true },
                    LastName: { required: true },
                    txtprevious: {
                        required: true,
                        minlength: 1,
                        maxlength: 150
                    },
                    txtwherefiled: {
                        required: true,
                        minlength: 1,
                        maxlength: 26
                    },
                    Appartment: {
                        required: true,
                        minlength: 0,
                        maxlength: 26
                    },
                    City: {
                        required: true,
                        minlength: 1,
                        maxlength: 23
                    },
                    State: {
                        required: true
                    },
                    Zip: {
                        required: true,
                        digits: true,
                        minlength: 5,
                        maxlength: 5
                    },
                    ApplicantCity: {
                        required: true,
                        minlength: 1,
                        maxlength: 23
                    },
                    ApplicantState: {
                        required: true
                    },
                    ApplicantZip: {
                        required: true,
                        digits: true,
                        minlength: 5,
                        maxlength: 5
                    },

                    BirthPlace: {
                        required: true,
                        minlength: 3,
                        maxlength: 32
                    },
                    Title: {
                        required: true,
                        minlength: 3,
                        maxlength: 32
                    },
                    ApplicantAddress: {
                        required: true,
                        minlength: 3,
                        maxlength: 32
                    },
                    Address: {
                        required: true,
                        minlength: 3,
                        maxlength: 32
                    },
                    Address2: {
                        required: true,
                        minlength: 3,
                        maxlength: 32
                    },
                    Phone: {
                        required: true,
                        minlength: 3,
                        maxlength: 32
                    },
                    Email: {
                        required: true,
                        minlength: 3,
                        maxlength: 80
                    },

                },
                messages: {
                    txtaddress: "Address1 is required and limited to 26 characters!",
                    Appartment: "if no appartment number enter N/A ",
                    txttitle: "enter N/A if person representing you does not have a title",
                    ApplicantAddress: "Address is required and limited to 26 characters!",
                    txtaddress2: "if no floor, suite, or appartment enter N/A ",
                    txtcity: "City is required!",
                    State: "State is required!",
                    Zip: "Zip is required and must be 5 digits long!",
                    BirthPlace: "your birth place is required!",
                    txtwherefiled: "Where filed, enter N/A if does this does not apply",
                    Email: "Email address required",
                    txtcellphone: "cell phone required 1-999-999-9999 or 1(999)999-9999",
                    Phone: "phone required 1-999-999-9999 or 1(999)999-9999 or N/A",
                },
                highlight: function (element) {
                    $(element).closest('.form-group').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-error');
                }

            });

            //$(document).on("click", "#submit", function (e) {
            //     e.preventDefault();
            //     $("#form1").valid();
            //alert ("submitted");
            //     return false;
            // });
        });
    </script>
}
